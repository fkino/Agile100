= ウォーターフォールしか知らなかった俺たちがアジャイルに挑戦した

//flushright{
みやはら
//}


タイトルの通り、それまでウォーターフォールでしか開発したことがなかった俺たちが本格的にアジャイルに挑戦した時に起きたことと、異世界に転生して（しない）次にやるならこうすればよかった、ということを書いておきます。

== ウォーターフォールで大失敗


まず、経緯から。なぜアジャイルに挑戦したのか。このプロジェクトは既存システムのリプレースなのですが、前段階でウォーターフォールで開発を行ったところ、大失敗。あまりにもシステムの規模が大きすぎ、2年間開発を行ったが結局何も出てこなかった、という大失敗をふまえて、「小さな失敗」、「とにかく動くものをリリース」ということを目指そう、という決定になったのがアジャイルな開発でやることになった大きな理由です。ウォーターフォールかアジャイルか、という比較検討を必要としなかったのは、その後の意思決定においては有利に働いたと感じます。

== ウォーターフォールしか知らなかった俺たち


さて、アジャイルで開発する、と決まりましたが、ユーザー企業には自分たちだけで内製化を行うほど人員がいません。そこで外部メンバーが集められることになりました。もちろん私もその一員で、主にDevOpsのOpsを担当することになりました。開発チームは別にいるのですが、ある意味立場が大きく異なるので、冷静に開発チームの様子を観察できる立場にいたと言ってもいいかもしれません。


開発チームは諸々の都合上、ある程度の規模感がありシステム構築運用の実績もある企業に委託することになりました。コンペ形式になったのですが、発注側が「アジャイルな開発」を提案して欲しい、と要求しているにも関わらず、「ウォーターフォールで開発」を提案してくる人々。人の話、聞いてました？状態。なかなか辛いものがありましたが、何とかアジャイルなやり方に対応していってもらえそうな企業に発注することになりました。


ただ、アサインされた人たちは、経験豊富な、あるいはやる気のある人たちでしたが、ウォーターフォールでの開発しか知らない人たちです。ゼロからの挑戦なので仕方がない面もありますが、一人でも経験者を入れておくことができたら、もう少し違っていたのではないかと思います。

=== 決められない人たち


プロジェクトのメンバーが集まり、開発がスタートしたわけですが、まず最初に直面したのが「決められない」「始まらない」という事態。ウォーターフォールで開発する場合、上流工程で仕様が策定され、開発に使う言語やフレームワークなど技術的な詳細仕様もすべて決定された状態で開発に取りかかります。もし仕様や言語の選定が誤っていてもそれは上流工程の責任であり、開発者の責任ではありません。


しかし、このプロジェクトの体制では、ビジネスプロセスは大きく変えないで再開発を行うため仕様に大きなブレはありませんが、言語などは開発者であるメンバーが選定する必要がありました。プロダクトオーナーとしては早めの「小さな失敗」は許容する、と伝えてはいましたが、開発メンバー側では自分たちで決めることに慣れていない、失敗することに対する恐怖心があったため、「とりあえずやってみる」になかなか踏み切れず、時間を空費してしまうことになりました。結局、プロジェクトがスタートして3ヶ月ぐらい経ったところでやっと動き出すことができましたが、心理的安全性が確保されていなかったことで1ヶ月は無駄にしてしまった印象です。

=== 人が多すぎ


また、最初から関わっているメンバーが多すぎました。特にプロジェクトに直接関わる必要が無い営業やマネージャーまでミーティングに参加しているため、メンバーが迂闊なことが言えない、動けない心理状態になってしまいました。この状況は営業提案段階でも感じていたことでしたが、大きい企業ほど意味のないマネージャーが関わってくることが多いものです。これらの人々を如何に排除するのか、というのも大事なポイントになるのではないでしょうか。

=== まず手を動かせる状態を素早く作る


Ops側の担当としても、なかなか開発仕様が定まらないため、インフラやツールを準備することができない、という状況が続いてしまいました。ニワトリタマゴですが、とりあえず想定の範囲内で「こういう感じでどうでしょうかね？」というものを提供して、実際に触ってもらった方が言語の選定などをもう少し早くできたように思いました。特に新しい言語やフレームワークの場合、実際に動くものを見せることで、開発者自身がどのような開発を行えばいいかイメージしやすい状態にすることがOps側の責務といってもいいかもしれません。

=== アジャイルではなくなっていく


いろいろと問題はありましたが、それでも開発がスタートしてしまえば、それなりに何とかなるものです。最初のリリースはユーザーにも「使い勝手が良くなった」と評判が良く、開発側に様々な要求が寄せられるようになりました。もちろん、必要な要求には応えつつ、まずはレガシーなシステムを新しい基盤に載せ替えていくのが優先課題なので、ビジネスプロセスの流れに従って、順次新しいシステムを開発していく作業が続いて行っています。


そのような状況が続くと、当初はかなり意識されていたアジャイルな開発、という感覚が薄れていきます。特に新機能のリリースはユーザーに対する影響が大きいことや、ビジネスカレンダーに従ってリリース時期に制約が出てくるため、リリース間隔が相当長くなっていきます。その結果、アジャイルな、あるいはスクラム開発的な要素は残しながら、全体として見るとウォーターフォール、あるいはスパイラル開発のような状態に変化していきました。


しかし、これはこれで良いのではないかと思います。プロジェクトの当初は、まずはリリースということでアジャイルな開発が意識されましたが、今のところ大きな問題が起きず開発が進んでいるのであれば、あえてリズムを崩す必要は無いと考えます。

=== 人の出入りの問題をどうするか


プロジェクトの体制は、開始当初から大きくは変わっていませんが、それでも人の出入りは避けて通れない問題です。これまではいわゆる「オンボーディング」は意識されずにいましたが、入れ替わりが多くなってくると開発者個々人の開発環境や開発プロセスなどが無視できない違いとなって現れてきます。今後、プロジェクトの開発標準を定め、新規メンバーには標準に従って開発してもらうことを意識する必要がありそうです。

=== 品質とテストの問題


開発が進むにつれて、本番リリース後に発見される不具合の頻度が上がってきている問題も感じられます。原因としてはレガシーなシステムが無秩序にデータベースを扱っていたため、誤ったデータが存在していることが不具合の主な原因です。しかし、リリース前に発見できなかったのか、と思われるものが多いため、開発段階、リリース前のテストを見直す必要がありそうです。現時点では明確にテストはこうあるべき、というものが無いため、品質保証の基準が曖昧です。開発者個々人の技術力や努力に頼らず、開発標準同様、テスト標準についても定める必要がありそうです。

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/miyahara.jpg}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        宮原 徹 @tmiyahar https://twitter.com/tmiyahar
        \end{minipage}
    \hspace{1ex}
//}

日本仮想化技術株式会社 代表取り締まられ役社長兼CEO(Chief Enkai Officer)。元々が某外資系DB屋だったので、システム開発には保守的ですが、ここ5年ぐらいはDevOpsのOps寄りポジションで活動中。
